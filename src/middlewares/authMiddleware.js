// src/middlewares/authMiddleware.js
const jwt = require("jsonwebtoken");
const pool = require("../db");

const JWT_SECRET = process.env.JWT_SECRET || "secreta-super-forte";

// ========================================
// Middleware para verificar token (JWT ou token_permanente)
// ========================================
async function verifyToken(req, res, next) {
  const tokenHeader = req.headers["authorization"];
  console.log("üîπ verifyToken - tokenHeader:", tokenHeader);

  if (!tokenHeader) {
    console.error("‚ùå verifyToken - Token n√£o fornecido");
    return res.status(403).json({ error: "Token n√£o fornecido" });
  }

  const token = tokenHeader.replace("Bearer ", "").trim();
  console.log("üîπ verifyToken - token extra√≠do:", token);

  try {
    // 1Ô∏è‚É£ Tenta verificar como JWT
    try {
      const decoded = jwt.verify(token, JWT_SECRET);
      console.log("‚úÖ verifyToken - JWT v√°lido:", decoded);
      req.user = decoded; // payload do JWT
      return next();
    } catch (err) {
      console.warn("‚ö†Ô∏è verifyToken - N√£o √© JWT v√°lido, tentando token permanente...");
    }

    // 2Ô∏è‚É£ Verifica se √© token permanente no banco
    const result = await pool.query(
      "SELECT id, nome, email, role, token_permanente FROM usuarios WHERE token_permanente=$1",
      [token]
    );

    if (!result.rows.length) {
      console.error("‚ùå verifyToken - Token permanente inv√°lido ou n√£o encontrado:", token);
      return res.status(401).json({ error: "Token inv√°lido ou expirado" });
    }

    const user = result.rows[0];
    console.log("‚úÖ verifyToken - Token permanente v√°lido para usu√°rio:", user.id);

    // Popula req.user com dados importantes do usu√°rio
    req.user = {
      id: user.id,
      nome: user.nome,
      email: user.email,
      role: user.role,
      token_permanente: user.token_permanente
    };

    next();
  } catch (err) {
    console.error("‚ùå verifyToken - Erro interno:", err.message);
    return res.status(500).json({ error: "Erro ao autenticar usu√°rio", details: err.message });
  }
}

// ========================================
// Middleware para verificar role do usu√°rio
// ========================================
function requireRole(role) {
  return (req, res, next) => {
    if (!req.user || req.user.role !== role) {
      console.error("‚ùå requireRole - Acesso negado para usu√°rio:", req.user?.id);
      return res.status(403).json({ error: "Acesso negado" });
    }
    console.log("‚úÖ requireRole - Usu√°rio autorizado:", req.user.id);
    next();
  };
}

module.exports = { verifyToken, requireRole };
